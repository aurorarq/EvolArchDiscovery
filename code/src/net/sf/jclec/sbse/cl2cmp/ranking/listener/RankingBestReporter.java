package net.sf.jclec.sbse.cl2cmp.ranking.listener;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import org.apache.commons.configuration.Configuration;

import es.uco.kdis.datapro.dataset.Dataset;
import es.uco.kdis.datapro.dataset.Column.NominalColumn;
import es.uco.kdis.datapro.dataset.Column.NumericalColumn;
import es.uco.kdis.datapro.dataset.Source.ExcelDataset;

import net.sf.jclec.AlgorithmEvent;
import net.sf.jclec.IAlgorithmListener;
import net.sf.jclec.IConfigure;
import net.sf.jclec.IFitness;
import net.sf.jclec.IIndividual;
import net.sf.jclec.algorithm.PopulationAlgorithm;
import net.sf.jclec.fitness.SimpleValueFitness;
import net.sf.jclec.sbse.cl2cmp.Cl2CmpMutator;
import net.sf.jclec.sbse.cl2cmp.mut.AbstractCmpMutator;
import net.sf.jclec.sbse.cl2cmp.ranking.RankingAlgorithm;
import net.sf.jclec.sbse.cl2cmp.ranking.RankingEvaluator;
import net.sf.jclec.sbse.cl2cmp.ranking.RankingIndividual;
import net.sf.jclec.sbse.cl2cmp.ranking.metrics.CmpMetric;
import net.sf.jclec.util.IndividualStatistics;

/**
 * Reporter for 'Classes to Components' (Cl2Cmp) problem.
 * It presents extended results for best individual.
 * <p>History:
 * <ul>
 * 	<li>1.0: Creation (July 2013)
 * 	<li>1.1: Add bestIndividual method (September 2013)
 * </ul>
 * @author Aurora Ramirez Quesada
 * @author Jose Raul Romero
 * @author Sebastian Ventura
 * @version 1.0
 * */
public class RankingBestReporter implements IAlgorithmListener, IConfigure  {

	//////////////////////////////////////////////////////////////////
	//----------------------------------------------------- Properties
	//////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */
	private static final long serialVersionUID = 8588270685575163848L;

	/** Name of the report*/
	private String reportTitle;

	/** Report frequency */
	private int reportFrequency;

	/** Report file */
	private File reportFile;

	/** Report file writer */
	private FileWriter reportFileWriter;

	/** Report dataset */
	private Dataset resultsDataset;

	/** The report already exits (for multiple executions) */
	private boolean isFirstExecution = false;

	/** Attributes to be saved in the dataset */
	private String [] tags = {"Best Fitness", "#Components", "#Connectors", "Invalid"};

	/** Attributes to be saved in the dataset (metrics used in the algorithm) */
	private String [] metricsTags;

	/** Actual column */
	private int actualColumn;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////	

	/**
	 * Empty Constructor
	 * */
	public RankingBestReporter() {
		super();
	}

	//////////////////////////////////////////////////////////////////
	//----------------------------------------------- Override methods
	//////////////////////////////////////////////////////////////////

	@Override
	public void configure(Configuration settings) {
		// Set report title (default "untitled")
		//this.reportTitle = settings.getString("report-title", "untitled");
		// Set report frequency (default 10 generations)
		this.reportFrequency = settings.getInt("report-frequency", 10); 
	}

	@Override
	public void algorithmStarted(AlgorithmEvent event) {
		// Create report title for this instance
		String datasetname = ((RankingEvaluator)((RankingAlgorithm)event.getAlgorithm()).getEvaluator()).getDatasetFileName();
		if(datasetname.contains("/"))
			datasetname=datasetname.substring(datasetname.lastIndexOf("/")+1);
		this.reportTitle = datasetname.substring(0, datasetname.lastIndexOf("."));

		this.reportTitle += "-s" + ((RankingAlgorithm)event.getAlgorithm()).getSelectorType();
		this.reportTitle += "-r" + ((RankingAlgorithm)event.getAlgorithm()).getReplacementType();
		this.reportTitle += "-i" + ((PopulationAlgorithm)event.getAlgorithm()).getPopulationSize();
		this.reportTitle += "-g" + ((PopulationAlgorithm)event.getAlgorithm()).getMaxOfGenerations();
		
		Cl2CmpMutator base = (Cl2CmpMutator)((RankingAlgorithm)event.getAlgorithm()).getMutator();
		List<AbstractCmpMutator> mut = base.getMutators();
		String probs = "-p";
		for(AbstractCmpMutator m: mut){
			probs += "-" +(int)(m.getWeight()*100);
		}
		this.reportTitle += probs;
		
		this.reportFile = new File(this.reportTitle+"-best.txt");
		if(!this.reportFile.exists()){
			if(this.reportFile.getParentFile()!=null)
				this.reportFile.getParentFile().mkdirs();
			this.isFirstExecution=true;
		}
		else
			this.isFirstExecution=false;

		// Create columns (one per each generation report, plus one for the generation 0)
		int numOfCols = ((PopulationAlgorithm)event.getAlgorithm()).getMaxOfGenerations()/this.reportFrequency + 1;

		this.actualColumn = 1;

		// Metric names
		ArrayList<CmpMetric> metrics = ((RankingEvaluator)((RankingAlgorithm)((PopulationAlgorithm)event.getAlgorithm())).getEvaluator()).getMetrics();
		this.metricsTags = new String[metrics.size()];
		String name;
		for(int i=0; i<this.metricsTags.length; i++){
			name = metrics.get(i).getClass().getName();
			name = name.substring(name.lastIndexOf(".")+1);
			this.metricsTags[i] = name;
		}

		// First execution
		if(this.isFirstExecution){

			// Create datasets if it is the first execution
			this.resultsDataset = new ExcelDataset();
			this.resultsDataset.setName(this.reportTitle);

			// Add a column with the name of the metrics to be saved
			this.resultsDataset.addColumn(new NominalColumn("Metrics"));
			for(int i=0; i<this.tags.length; i++)
				this.resultsDataset.getColumn(0).addValue(this.tags[i]);

			// Add a column with the name of the fitness metrics to be saved
			for(int i=0; i<this.metricsTags.length; i++){
				this.resultsDataset.getColumn(0).addValue(this.metricsTags[i]);
			}

			// Add numerical columns (one for each generation that will be reported)
			for(int i=0; i<numOfCols; i++)
				this.resultsDataset.addColumn(new NumericalColumn("Gen-"+(i*this.reportFrequency)), i+1);
		}

		// Other executions, open the dataset and add new attributes
		else{
			this.resultsDataset = new ExcelDataset(this.reportTitle+"-best.xlsx");
			try {
				String format = "s";	// The first column is nominal
				// Concatenate 'f' for numerical columns
				for(int i=0; i<numOfCols; i++)
					format = format.concat("f");
				this.resultsDataset.setNullValue("?");
				((ExcelDataset)this.resultsDataset).readDataset("nv", format);
			} catch (Exception e) {
				e.printStackTrace();
			}
			// Append new values in the metric's column for the new experiment
			for(int i=0; i<this.tags.length; i++)
				this.resultsDataset.getColumn(0).addValue(this.tags[i]);
			// Metrics tags
			for(int i=0; i<this.metricsTags.length; i++)
				this.resultsDataset.getColumn(0).addValue(this.metricsTags[i]);
		}
		// Do an iteration report
		doIterationReport((PopulationAlgorithm) event.getAlgorithm(), true);
	}

	@Override
	public void iterationCompleted(AlgorithmEvent event) {
		doIterationReport((PopulationAlgorithm) event.getAlgorithm(), false);
	}

	@Override
	public void algorithmFinished(AlgorithmEvent event) {
		// Do last generation report
		doIterationReport((PopulationAlgorithm) event.getAlgorithm(), true);

		// Save best individual
		bestIndividual((PopulationAlgorithm) event.getAlgorithm());

		// Close report file if necessary
		if (this.reportFile != null) {
			try {
				this.reportFileWriter.close();
			} 
			catch (IOException e) {
				e.printStackTrace();
			}
		}

		// Save dataset
		try {
			((ExcelDataset)this.resultsDataset).writeDataset(this.reportTitle+"-best.xlsx");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void algorithmTerminated(AlgorithmEvent oEvent) {
		// Do nothing
	}

	//////////////////////////////////////////////////////////////////
	//---------------------------------------------- Protected methods
	//////////////////////////////////////////////////////////////////

	/**
	 * Do iteration report
	 * @param algorithm The algorithm
	 * @param force Force report
	 * */
	protected void doIterationReport(PopulationAlgorithm algorithm, boolean force) {
		// Fitness comparator
		Comparator<IFitness> comparator = algorithm.getEvaluator().getComparator();
		// Population individuals
		List<IIndividual> inhabitants = algorithm.getInhabitants();
		// Actual generation
		int generation = algorithm.getGeneration();

		// Check if this is correct generation
		if (!force && generation%this.reportFrequency != 0) {
			return;
		}		

		// Best individual
		IIndividual best = IndividualStatistics.bestIndividual(inhabitants, comparator);

		// Save the values in the dataset
		if(((RankingIndividual)best).isInvalid())
			this.resultsDataset.getColumn(this.actualColumn).addValue(-1.0);
		else
			this.resultsDataset.getColumn(this.actualColumn).addValue(((SimpleValueFitness)best.getFitness()).getValue());

		this.resultsDataset.getColumn(this.actualColumn).addValue((double)((RankingIndividual)best).getNumberOfComponents());
		this.resultsDataset.getColumn(this.actualColumn).addValue((double)((RankingIndividual)best).getNumberOfConnectors());
		if(((RankingIndividual)best).isInvalid())
			this.resultsDataset.getColumn(this.actualColumn).addValue(1.0);
		else
			this.resultsDataset.getColumn(this.actualColumn).addValue(0.0);

		// Value of each fitness metrics
		ArrayList<CmpMetric> metrics = ((RankingEvaluator)((RankingAlgorithm)algorithm).getEvaluator()).getMetrics();
		for(int i=0; i<this.metricsTags.length; i++){
			this.resultsDataset.getColumn(this.actualColumn).addValue(metrics.get(i).getFromIndividual((RankingIndividual)best));
		}
		this.actualColumn++;
	}

	/**
	 * Save best individual in file
	 * @param algorithm The algorithm
	 * */
	private void bestIndividual(PopulationAlgorithm algorithm) {

		// Fitness comparator
		Comparator<IFitness> comparator = algorithm.getEvaluator().getComparator();
		// Population individuals
		List<IIndividual> inhabitants = algorithm.getInhabitants();

		// Do population report
		StringBuffer sb = new StringBuffer("\nBEST INDIVIDUAL\n");

		// Best individual
		IIndividual best = IndividualStatistics.bestIndividual(inhabitants, comparator);

		// Last report, add best individual
		sb.append(((RankingIndividual)best).toString() + "\n");

		if(algorithm.getGeneration()>=algorithm.getMaxOfGenerations()){	
			sb.append("\n--------------------------------------------------\n\n");
		}

		// Write string to the report file (if necessary) 
		try {
			this.reportFileWriter = new FileWriter(this.reportFile, true);
			this.reportFileWriter.write(sb.toString());
			this.reportFileWriter.flush();
		} 
		catch (IOException e) {
			e.printStackTrace();
		}
	}
}