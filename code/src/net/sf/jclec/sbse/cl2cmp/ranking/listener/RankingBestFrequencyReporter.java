package net.sf.jclec.sbse.cl2cmp.ranking.listener;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import net.sf.jclec.AlgorithmEvent;
import net.sf.jclec.IAlgorithmListener;
import net.sf.jclec.IConfigure;
import net.sf.jclec.IFitness;
import net.sf.jclec.IIndividual;
import net.sf.jclec.algorithm.PopulationAlgorithm;
import net.sf.jclec.fitness.SimpleValueFitness;
import net.sf.jclec.sbse.cl2cmp.Cl2CmpMutator;
import net.sf.jclec.sbse.cl2cmp.mut.AbstractCmpMutator;
import net.sf.jclec.sbse.cl2cmp.ranking.RankingAlgorithm;
import net.sf.jclec.sbse.cl2cmp.ranking.RankingEvaluator;
import net.sf.jclec.sbse.cl2cmp.ranking.RankingIndividual;
import net.sf.jclec.sbse.cl2cmp.ranking.metrics.CmpMetric;
import net.sf.jclec.util.IndividualStatistics;

import org.apache.commons.configuration.Configuration;

import es.uco.kdis.datapro.dataset.Dataset;
import es.uco.kdis.datapro.dataset.Column.NumericalColumn;
import es.uco.kdis.datapro.dataset.Source.ExcelDataset;

/**
 * Reporter for 'Classes to Components' (Cl2Cmp) problem.
 * It stores the convergence of each metric and fitness of the best individual.
 * <p>History:
 * <ul>
 * 	<li>1.0: Creation (October 2013)
 * </ul>
 * @author Aurora Ramirez Quesada
 * @author Jose Raul Romero
 * @author Sebastian Ventura
 * @version 1.0
 * */

public class RankingBestFrequencyReporter implements IAlgorithmListener, IConfigure {

	//////////////////////////////////////////////////////////////////
	//----------------------------------------------------- Properties
	//////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */
	private static final long serialVersionUID = 8588270685575163848L;

	/** Name of the report*/
	private String reportTitle;

	/** Report frequency */
	private int reportFrequency;

	/** Report file */
	private File reportFile;

	/** Report dataset */
	private Dataset fitnessDataset;

	/** Report dataset */
	private Dataset icdDataset;

	/** Report dataset */
	private Dataset erpDataset;

	/** Report dataset */
	private Dataset gcrDataset;

	/** The report already exits (for multiple executions) */
	private boolean isFirstExecution = false;

	/** Actual column */
	private int actualColumn;

	private int numOfCols;

	private int nExecutions;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////	

	/**
	 * Empty Constructor
	 * */
	public RankingBestFrequencyReporter() {
		super();
	}

	//////////////////////////////////////////////////////////////////
	//----------------------------------------------- Override methods
	//////////////////////////////////////////////////////////////////

	@Override
	public void configure(Configuration settings) {
		// Set report title (default "untitled")
		//this.reportTitle = settings.getString("report-title", "untitled");
		// Set report frequency (default 10 generations)
		this.reportFrequency = settings.getInt("report-frequency", 1);
		this.nExecutions = settings.getInt("number-of-executions", 1);
	}

	@Override
	public void algorithmStarted(AlgorithmEvent event) {
		// Create report title for this instance
		String datasetname = ((RankingEvaluator)((RankingAlgorithm)event.getAlgorithm()).getEvaluator()).getDatasetFileName();
		if(datasetname.contains("/"))
			datasetname=datasetname.substring(datasetname.lastIndexOf("/")+1);
		this.reportTitle = datasetname.substring(0, datasetname.lastIndexOf("."));

		this.reportTitle += "-s" + ((RankingAlgorithm)event.getAlgorithm()).getSelectorType();
		this.reportTitle += "-r" + ((RankingAlgorithm)event.getAlgorithm()).getReplacementType();
		this.reportTitle += "-i" + ((PopulationAlgorithm)event.getAlgorithm()).getPopulationSize();
		this.reportTitle += "-g" + ((PopulationAlgorithm)event.getAlgorithm()).getMaxOfGenerations();

		Cl2CmpMutator base = (Cl2CmpMutator)((RankingAlgorithm)event.getAlgorithm()).getMutator();
		List<AbstractCmpMutator> mut = base.getMutators();
		String probs = "-p";
		for(AbstractCmpMutator m: mut){
			probs += "-" +(int)(m.getWeight()*100);
		}
		this.reportTitle += probs;

		this.reportFile = new File(this.reportTitle+"-fitness.xlsx");

		if(!this.reportFile.exists()){
			if(this.reportFile.getParentFile()!=null)
				this.reportFile.getParentFile().mkdirs();
			this.isFirstExecution=true;
		}
		else
			this.isFirstExecution=false;

		// Create columns (one per each generation report, plus one for the generation 0)
		this.numOfCols = ((PopulationAlgorithm)event.getAlgorithm()).getMaxOfGenerations()/this.reportFrequency + 1;

		this.actualColumn = 0;

		// First execution
		if(this.isFirstExecution){

			// Create datasets if it is the first execution
			this.fitnessDataset = new ExcelDataset();
			this.icdDataset = new ExcelDataset();
			this.erpDataset = new ExcelDataset();
			this.gcrDataset = new ExcelDataset();

			// Add columns
			for(int i=0; i<numOfCols; i++){
				this.fitnessDataset.addColumn(new NumericalColumn("GEN-" + (i*this.reportFrequency)));
				this.icdDataset.addColumn(new NumericalColumn("GEN-" + (i*this.reportFrequency)));
				this.erpDataset.addColumn(new NumericalColumn("GEN-" + (i*this.reportFrequency)));
				this.gcrDataset.addColumn(new NumericalColumn("GEN-" + (i*this.reportFrequency)));
			}
		}

		// Other executions, open the dataset
		else{
			this.fitnessDataset = new ExcelDataset(this.reportTitle+"-fitness.xlsx");
			this.icdDataset = new ExcelDataset(this.reportTitle+"-icd.xlsx");
			this.erpDataset = new ExcelDataset(this.reportTitle+"-erp.xlsx");
			this.gcrDataset = new ExcelDataset(this.reportTitle+"-gcr.xlsx");

			try {
				String format = "";
				// Concatenate 'f' for numerical columns
				for(int i=0; i<numOfCols; i++)
					format = format.concat("f");

				this.fitnessDataset.setNullValue("?");
				((ExcelDataset)this.fitnessDataset).readDataset("nv", format);

				this.icdDataset.setNullValue("?");
				((ExcelDataset)this.icdDataset).readDataset("nv", format);

				this.erpDataset.setNullValue("?");
				((ExcelDataset)this.erpDataset).readDataset("nv", format);

				this.gcrDataset.setNullValue("?");
				((ExcelDataset)this.gcrDataset).readDataset("nv", format);


			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		// Do an iteration report
		doIterationReport((PopulationAlgorithm) event.getAlgorithm(), true);
	}

	@Override
	public void iterationCompleted(AlgorithmEvent event) {
		doIterationReport((PopulationAlgorithm) event.getAlgorithm(), false);
	}

	@Override
	public void algorithmFinished(AlgorithmEvent event) {
		// Do last generation report
		doIterationReport((PopulationAlgorithm) event.getAlgorithm(), true);

		// Save datasets
		try {

			// Get means
			int size = this.fitnessDataset.getColumn(0).getSize();
			if(nExecutions>1 && size==nExecutions){
				for(int i=0; i<numOfCols; i++){	
					this.fitnessDataset.getColumn(i).addValue(((NumericalColumn)this.fitnessDataset.getColumn(i)).mean());
					this.icdDataset.getColumn(i).addValue(((NumericalColumn)this.icdDataset.getColumn(i)).mean());
					this.erpDataset.getColumn(i).addValue(((NumericalColumn)this.erpDataset.getColumn(i)).mean());
					this.gcrDataset.getColumn(i).addValue(((NumericalColumn)this.gcrDataset.getColumn(i)).mean());
				}
			}
			// Save dataset
			((ExcelDataset)this.fitnessDataset).writeDataset(this.reportTitle+"-fitness.xlsx");
			((ExcelDataset)this.icdDataset).writeDataset(this.reportTitle+"-icd.xlsx");
			((ExcelDataset)this.erpDataset).writeDataset(this.reportTitle+"-erp.xlsx");
			((ExcelDataset)this.gcrDataset).writeDataset(this.reportTitle+"-gcr.xlsx");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void algorithmTerminated(AlgorithmEvent oEvent) {
		// Do nothing
	}

	//////////////////////////////////////////////////////////////////
	//---------------------------------------------- Protected methods
	//////////////////////////////////////////////////////////////////

	/**
	 * Do iteration report
	 * @param algorithm The algorithm
	 * @param force Force report
	 * */
	protected void doIterationReport(PopulationAlgorithm algorithm, boolean force) {
		// Fitness comparator
		Comparator<IFitness> comparator = algorithm.getEvaluator().getComparator();
		// Population individuals
		List<IIndividual> inhabitants = algorithm.getInhabitants();
		// Actual generation
		int generation = algorithm.getGeneration();

		// Check if this is correct generation
		if (!force && generation%this.reportFrequency != 0) {
			return;
		}		

		// Best individual
		IIndividual best = IndividualStatistics.bestIndividual(inhabitants, comparator);

		// Save the values in the dataset
		this.fitnessDataset.getColumn(this.actualColumn).addValue(((SimpleValueFitness)best.getFitness()).getValue());
		ArrayList<CmpMetric> metrics = ((RankingEvaluator)((RankingAlgorithm)algorithm).getEvaluator()).getMetrics();
		this.icdDataset.getColumn(this.actualColumn).addValue(metrics.get(0).getFromIndividual((RankingIndividual)best));
		this.erpDataset.getColumn(this.actualColumn).addValue(metrics.get(1).getFromIndividual((RankingIndividual)best));
		this.gcrDataset.getColumn(this.actualColumn).addValue(metrics.get(2).getFromIndividual((RankingIndividual)best));
		this.actualColumn++;
		
		
	}
}